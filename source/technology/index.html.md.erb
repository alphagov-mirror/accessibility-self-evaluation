---
title: Check technology
weight: 70
---

# 5. Technology

You’ll need to do check that users don’t have trouble interacting with your website. This means checking for technological or frontend issues.

## Tests using a mobile or tablet device

You’ll need to do some checks using a mobile or tablet device to check that your website is usable on these types of device.

### Check the page orientation

You’ll need to take a few of your sample pages and check they respond properly when you try to change the page orientation.

You can do this by loading up a page on a mobile or tablet device and turning the screen from portrait to landscape a few times. If the page responds and changes to fit that view, then you’re meeting the requirement. If it stays locked in place, then you’re not.

### Check you can navigate using just one finger

Some users have limited dexterity or range of movement, which means it’s important that they don’t have to use complex gestures that involve more than one finger to navigate your website on their mobile or tablet device. There needs to be a simple alternative that they can use that only requires one finger.

Go through your sample content pages and check whether it’s possible to navigate using just one finger. Try things like double-tapping to zoom in and out of the page and holding or hovering your finger over an element to highlight it.

It’s worth trying to complete a couple of forms using these techniques, too.

### Check you’re not relying on complex motions

Some more interactive websites or apps require users to do things like shake or tilt their device to complete an action.

This won’t apply to most websites, but if it applies to yours then you need to make sure there’s an alternative for users who can’t move their device in these ways.

Check that none of your sample pages require any of these types of interactions - and if they do, that there’s another way of completing the task.

## Navigating just using a keyboard

Some of your users won’t be using a mouse and will need to navigate just using a keyboard. You’ll need to do some checks to see how easy it is for them to do that.

The main keys you’ll be using to navigate are the ‘Tab’, ‘Enter’ and ‘Esc’ keys. ‘Tab’ is the key that lets you jump between page elements, while ‘Enter’ and ‘Esc’ let you interact with and dismiss those page elements.

You might need to [enable the tabbing function if you’re using Safari](https://a11yproject.com/posts/safari-keyboard-navigation/).

### Check you can tell where you are on the page

When you navigate just using a keyboard, you don’t have the mouse cursor to let you know where the focus is on the page. You need to make sure there’s another way for users to orientate themselves and understand which page element they’re focusing on.

For example, if you tab through the [GOV.UK homepage](https://www.gov.uk/) you’ll notice that the page element in focus is highlighted very clearly with a prominent orange block.

Spend a few minutes tabbing through a few of the sample pages you selected. Ask yourself whether it’s clear where on the page you’re focused - if it takes you a while to notice which element is in focus then you’re probably not meeting this requirement.

### Check the order makes sense when tabbing

While you were tabbing through the page elements, you should have noticed whether the tabbing moved in a logical order. For instance, if you tab on to a navigation bar, you’d expect to be able to tab through the entire bar without the focus jumping off elsewhere on the page.

Spend a few minutes testing this on a few of your sample pages, to check you can tab in a logical order.

### Check nothing unexpected happens when tabbing through a page

When you were tabbing through your sample pages, you should have noticed whether anything unexpected happened. For example, if tabbing onto an element triggered anything like:

+ a new web page to open
+ a navigation menu to open

Another thing to look out for is whether you can interact with all the page elements you’d expect to.

For example, some websites like the Service Manual feature [hide and reveal style navigation](https://www.gov.uk/service-manual/user-research). If these navigational elements are marked up properly, you can expand and close them with a keyboard as you would with a mouse.

But if they aren’t, you’ll likely tab straight past them using just a keyboard. Look out for things like this.

### Check you don’t get stuck when navigating through content

While you’re tabbing through your sample pages, note down any places where you get stuck.

Getting stuck means ending up somewhere you can’t navigate away from using just your keyboard. For instance, you might activate a pop-up or interactive element that you can’t skip away from just by using the ‘Esc’ key.

Users who don’t use their mouse wouldn’t be able to move away from a page element like this, which could prove very frustrating. 

If you find you get stuck, you’re probably not meeting this requirement. 

### Check forms are still usable without a mouse

Take your sample of forms and see if you can complete them without using a mouse. This means using ‘Tab’ to jump between the form elements and ‘Enter’ to interact with any navigation elements, like ‘next’ or ‘submit’ buttons.

If there are form elements you can’t get through using just your keyboard, then your website isn’t meeting this requirement. 

### Check users can skip to the main content on a page

Lots of websites contain several links and navigational elements in the header at the top of the page. Users need to be able to skip past these links straight to the main page content if they want to, so they don’t have to tab through each item individually every time they open a new page.

Some websites give users the chance to skip these header blocks. For instance, if you hit ‘Tab’ when you arrive at the [GOV.UK home page](https://www.gov.uk/), you’ll see the option to ‘Skip to main content’. If you hit ‘Enter’, the page will refocus past the header block down to where the actual page content begins.

See if the same thing happens when you hit ‘Tab’ after refreshing a page on your website.

## Checking content is usable when zoomed in or magnified

Some users with visual impairments use screen magnification tools that zoom into the page content, or increase the size of the text. You’ll need to check your content is usable for people using these tools.

### Checking content is usable when you enlarge the text

Take a couple of the forms and content pages from your sample and see what happens if you increase the font size.

You can usually do this by changing the settings in your browser. For example, in Chrome you do this by choosing “Settings”, and changing the “Font size” from “medium” to “very large”.

Once you’ve increased the font size, try to complete a few tasks using your sample pages. If the page resizes or restructures properly, it won’t obscure any of the important information or buttons you’d need to progress through a form.

### Checking how the page behaves when users zoom in

You’ll need to check what happens to your pages when you adjust the page zoom in your browser. You can do this either through your browser’s settings or by using a keyboard shortcut - usually ‘Cmd’ or ‘Ctrl’ plus the ‘+’ key.

Use the same sample of pages you used when tweaking the size of the text. For each page, see what happens when you zoom progressively further in.

If your website is handling this in an accessible way, then you shouldn’t need to use horizontal scroll: the content should reformat in a way that means you only need to use vertical scrolling.

## Colour contrast

Some users with visual impairments won’t be able to interact with your website if the colour contrast isn’t set properly.

So check the colour contrast on your sample pages, including any PDFs or other document types.

### Check for text contrast

You’ll need to check that the contrast ratio between text and the background colour of your website is at least 4.5:1.

You can use the [WAVE tool to check colour contrast](http://wave.webaim.org/).

This involves copying one of your sample URLs and pasting it into the [WAVE tool](http://wave.webaim.org/). Once you’ve done that, select ‘contrast’ from the panel on the left-hand side of the tool. This should show you the colour contrast information for the page in question.

### Check any buttons and navigational elements

Like you did for the text on your website, you’ll need to check that the colour contrast between any buttons or navigational elements (like ‘next’ or ‘continue’ buttons in forms) and the background of your website is set appropriately.

The contrast ratio needs to be at least 3:1 in these cases. Again, use the WAVE tool to check this.

## Pop-ups and interactive or flashing content

Pop-ups or flashing images can be very distracting. Users need to be able to disable or dismiss these elements easily.

### Check that users can disable animated or moving content

Things like scrolling carousels or blinking images can be very distracting for people with cognitive disabilities.

If your website contains these sorts of elements, you need to check whether users can disable them.

Go to any of your sample pages containing these items and see if there’s a way to stop them. Try clicking on them, or interacting with the surrounding content. Check to see if there’s a button to stop or pause the item.

### Check for content that plays automatically

Some websites play audio or video content automatically when a user refreshes or opens a page.

If this applies to your website - and the content plays for more than 3 seconds - you’ll need to check users can either change the volume or stop it altogether. There’s likely to be a video or audio box somewhere on the page that you can interact with to do these things.

### Check whether there’s an alternative for people who can’t see maps

Some websites contain interactive maps. 

It’s very hard to make a map itself accessible to people who have visual impairments using some sorts of assistive technology. At the least, you should provide an alternative for users who aren’t able to use the map. 

The Pension Wise website does this well. For instance, when you [search for your nearest contact centre](https://www.pensionwise.gov.uk/en/book-face-to-face), you’re presented not only with a map you could use to navigate, but also with a text address any user could access.

Check any maps on your website to see whether you’re providing alternative routes for users who can’t use the map. 

## Search and other forms of navigation

You’ll need to do some checks to see how accessible your website’s navigation is. Navigation includes things like search, [site maps](https://support.google.com/webmasters/answer/156184?hl=en) and navigation categories.

### Check there are multiple ways to navigate your website

Different users have different preferences, which means you need to provide more than one way of accessing content.

The most common ways of doing this include:

+ offering a search bar
+ publishing a [site map](https://en.wikipedia.org/wiki/Site_map)
+ offering navigation categories that break up the content by theme

Check that you’re offering more than one of these options.

### Check your navigation behaves consistently

Things like search bars and breadcrumb trails (the list of links that appear at the top of the  page to show where in your website’s navigation you currently are) should behave in the same way wherever they appear on your website.

You can check for this by going to a few of your sample pages and checking whether the navigational elements are presented consistently. If things like search boxes or navigation menus appear in different places across the pages, you’re probably not meeting the requirements.

### Check links aren’t triggered on the down-press of a mouse

To open a link, a user has to click their mouse (known as a ‘down event’) and release it (known as an ‘up event’).

You need to check that this is how your links behave. Check a sample of your content pages and interact with some of the links - specifically to see whether the links are opened on the down click of the mouse, or whether they only open once you release the mouse button.

If they’re triggered on the down event, you’re not meeting the accessibility requirements.
